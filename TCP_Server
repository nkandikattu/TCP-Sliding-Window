package server;

import java.net.*;
import java.io.*;
import java.sql.Array;
import java.util.*;

public class TCP_Server {

    // Initialize socket and input stream
    Socket sender = null;
    ServerSocket receiver;

    ObjectInputStream in;
    ObjectOutputStream out;


    String ack, pkt, data="";

    int SeqNum = 0;
    int receiver_window_size = 1;
    int last_frame_received = 0;
    int largest_acceptable_frame = last_frame_received + receiver_window_size;

    String segment = "";
    final static int MAX_SEQ_NUM = (int) Math.pow(2, 16);
    final static int MAX_SW_VALUE = (int) Math.pow(2, 16);
    final static int MAX_SEGMENTS = 10000000;
    int currSeqNum = -1023;

    int last_segment_received = 0;
    int total_segments_received = 0;

    TreeSet<Integer> buffer = new TreeSet<>();
    ArrayList<Integer> window_size_over_time = new ArrayList<>();
    ArrayList<String[]> seq_num_over_time = new ArrayList<>();

    int duplicates = 0;

    // Constructor with port
    public TCP_Server() {}

    public void checkBuffer(int seqNum) throws IOException {
        if(buffer.isEmpty()) {
            System.out.println("Buffer is empty, adding " + seqNum + " to buffer." );
            buffer.add(seqNum);
        } else if(seqNum == buffer.first() - 1024) {
            ArrayList<Integer> bufferList = new ArrayList<>(buffer);
            for(int i = 0; i < bufferList.size(); i++) {
                if(seqNum == bufferList.get(0) - 1024) {
                    sendAck(seqNum + 1024);
                    seqNum = bufferList.get(0);
                    bufferList.remove(0);
                }
            }
            buffer = new TreeSet<>(bufferList);
        } else {
            buffer.add(seqNum);
        }
    }

    public void sendAck(int ack) throws IOException {
        out.writeObject(ack);
        out.flush();
        System.out.println("Sent ACK of " + ack);
    }

    // Requests number of segments sent from client to calculate good-put
    public void requestSentSegmentNum() {
        try {
            out.writeObject("How many segments sent so far?");
            out.flush();
            System.out.println("Number of segments sent requested from client.");
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public void receivePackets() throws ClassNotFoundException {
        long startTime = System.nanoTime();
        boolean keepListening = true;
        while(keepListening) {

            try {
                int seqNum = (int) in.readObject();
                System.out.println("Message received: " + seqNum);

                total_segments_received++;
                System.out.println("Total segments received: " + total_segments_received);
                long endTime = System.nanoTime();
                seq_num_over_time.add(new String[]{String.valueOf(seqNum), String.valueOf(startTime - endTime)});

                if (buffer.isEmpty() && seqNum == currSeqNum + 1024) {
                    if(seqNum == 64513) {
                        sendAck(1);
                        currSeqNum = -1023;
                    } else {
                        sendAck(seqNum + 1024);
                        currSeqNum = seqNum;
                    }
                } else {
                    System.out.println("checkBuffer() called.");
                    checkBuffer(seqNum);
                }

                System.out.println("");


//                if((SeqNum <= last_frame_received)||(SeqNum > largest_acceptable_frame)) {
//                    System.out.println("\nMsg received : "+data);
//
//                    if(last_frame_received == 15) {
////                        out.writeObject(ack);
////                        out.flush();
////                        System.out.println("sending ack " +ack);
//                        sendAck();
//                        SeqNum++;
//                    } else {
//                        System.out.println("Not sending ack");
//                    }
//                } else {
//                    out.writeObject(last_frame_received);
//                    out.flush();
//                    System.out.println("resending ack " + last_frame_received);
//                }
            } catch (EOFException e) {
                System.out.println("Nothing left to receive.");
                keepListening = false;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    public void run() {

        try {

            // Instantiate server
            receiver = new ServerSocket(9999);
            System.out.println("TCP_Server established: " + receiver.getInetAddress());

            // Establish connection with Client
            System.out.println("\nWaiting for a client ...");
            sender = receiver.accept();
            System.out.println("Client accepted.");
            System.out.println("Connection established with: " + sender.getInetAddress());

            // Takes in input from client socket and gives output
            in = new ObjectInputStream(sender.getInputStream());
            out = new ObjectOutputStream(sender.getOutputStream());

            // Handshake in form of receiving "network" and sending "success"
            String msg = (String)in.readObject();
            System.out.println("\nMessage received: " + msg);
            if(msg.equals("network")) {
                out.writeObject("success");
                out.flush();
                System.out.println("Connection tested successfully.");
            }

            receivePackets();

            // Close I/O streams and server.
            in.close();
            out.close();
            receiver.close();
            System.out.println("\nConnection Terminated.");

        } catch(ClassNotFoundException e) {
            e.printStackTrace();
        } catch(IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String args[]) throws IOException, InterruptedException {
        TCP_Server server = new TCP_Server();
        server.run();
    }
}
