package server;

import java.net.*;
import java.io.*;
import java.util.*;

public class TCP_Server {

    // Initialize socket and input stream
    Socket sender = null;
    ServerSocket receiver;

    ObjectInputStream in;
    ObjectOutputStream out;


    String ack, pkt, data="";

    boolean connEst = false;
//
//    int SeqNum = 0, RWS = 5;
//    int LFR = 0;
//    int LAF = LFR+RWS;
//

    String segment = "";
    final static int MAX_SEQ_NUM = 2^16;
    final static int MAX_SW_VALUE = 2^16;
    final static int MAX_SEGMENTS = 10000000;
    int currSegNum = 1;
    int currSeqNum = 1;

    ArrayList<Integer[]> buffer = new ArrayList<>();

    // Constructor with port
    public TCP_Server() {}

    public void checkDuplicates(int segNum, int seqNum, String segment) {
        for(int i = 0; i < buffer.size(); i++) {
            if(buffer.get(i)[0] == segNum) {

            }
        }
    }

    public void run() {

        try {

            // Instantiate server
            receiver = new ServerSocket(5000);
            System.out.println("TCP_Server instantiated ...");
            System.out.println("TCP_Server established: " + receiver.getInetAddress());

            // Establish connection with Client
            System.out.println("\nWaiting for a client ...");
            sender = receiver.accept();

            System.out.println("Client accepted.");
            System.out.println("Connection established with: " + sender.getInetAddress());

            // Takes in input from client socket and gives output
            in = new ObjectInputStream(sender.getInputStream());
            out = new ObjectOutputStream(sender.getOutputStream());

            String msg = (String)in.readObject();
            System.out.println("\nMessage received: " + msg);
            if(msg.equals("network")) {
                out.writeObject("success");
                out.flush();
                System.out.println("Connection tested successfully.");
            }

            while(currSegNum < MAX_SEGMENTS) {
                segment = (String)in.readObject();
                String []str = pkt.split("\\s");

                int segNum = Integer.parseInt(str[0]);
                int seqNum = Integer.parseInt(str[1]);

                checkDuplicates(segNum, seqNum, segment);


//                if((SeqNum<=LFR)||(SeqNum>LAF)) {
//                    System.out.println("\nMsg received : "+data);
//                    delay = rand.nextInt(5);
//
//                    if(delay<3 || LFR==15) {
//                        out.writeObject(ack);
//                        out.flush();
//                        System.out.println("sending ack " +ack);
//                        SeqNum++;
//                    } else {
//                        System.out.println("Not sending ack");
//                    }
//                } else {
//                    out.writeObject(LFR);
//                    out.flush();
//                    System.out.println("resending ack " + LFR);
//                }
            }

            in.close();
            out.close();
            receiver.close();
            System.out.println("\nConnection Terminated.");

        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String args[]) throws IOException, InterruptedException {
        TCP_Server server = new TCP_Server();
        server.run();
    }
}
