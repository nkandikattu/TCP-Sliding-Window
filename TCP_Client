package socket_code;

import java.io.*;
import java.net.Socket;
import java.util.ArrayList;


public class TCPClient2 {
	
	ObjectOutputStream out;
	ObjectInputStream in;
	
	final static int TOTAL_SEQUENCE_NUMBERS = (int) Math.pow(2, 16);
	final int MAX_SLIDING_WINDOW_VALUE = (int) Math.pow(2, 16);
 //   final int TOTAL_SEGMENTS = 10000000;
	final int TOTAL_SEGMENTS = 10000000;
	int starting_seq_number = 0;
	int ending_seq_number = 1024;
	int sliding_window_size = 1;
	int last_ack_recieved = 0;
	int last_segment_recieved = 0;
	int segment_number = 1;
    boolean segment_lost = false;
    int ack_expected;
    int j = 0;
    int seq_no = 1;
    boolean calculate_success;
    Socket client;
    int number_of_segments_sent = 0;
    ArrayList<Integer> recieved_Acks = new ArrayList<>();
    ArrayList<Integer[]> buffer = new ArrayList<>();
    ArrayList<String> seq_no_dropped_over_time = new ArrayList<>();
    ArrayList<String> window_size_over_time = new ArrayList<>();
    long sendingStartTime;
    long droppedEndTime;
    long windowStartTime;
    long windowEndTime;
    String packet;
    String window_graph_info;
    String dropped_seq_no_info;
    
	public void reset() {
		seq_no = -1023;
	}
	
	//sending the segments
	public void SendPackets() throws Exception{
			    sendingStartTime = System.nanoTime();
				while(segment_number <TOTAL_SEGMENTS ) {
					if(seq_no >= TOTAL_SEQUENCE_NUMBERS) {
						reset();
					}
					System.out.println(" BEGINNING: segments value " + segment_number + "sequence number value : " + seq_no);
					System.out.println("sending packets..." );
					//number of segments to send
					for(j=0; j<sliding_window_size; j++) {
						System.out.println("Sending segment # " + segment_number + "\n" );
						//sending sequence numbers + the segment	
						
						    
					//		packet = String.valueOf(seq_no); //sending the sequence number
					//		packet = packet.concat(" ");
					//		packet = packet.concat(String.valueOf(segments)); //sending the segment number
					//		packet = packet.concat(" ");
					//		packet = packet.concat(String.valueOf(sliding_window_size)); //sending the window size
							out.writeObject(seq_no);
							System.out.println("Sending seq number " + seq_no + " and window size is : " + sliding_window_size);
							buffer.add(	new Integer[]{segment_number, seq_no});
							if(seq_no >= TOTAL_SEQUENCE_NUMBERS || (seq_no + 1024) >= TOTAL_SEQUENCE_NUMBERS) {
								reset();
							}
							seq_no += 1024;
							segment_number++;
							number_of_segments_sent++;
							
							calculate_success = AckRecieved();
							
							if(segment_number==TOTAL_SEGMENTS+1) {
								break;
							}
							
					}
					
					SlidingWindowHandling();
					
					System.out.println("one transaction completed");
					
					System.out.println("value of next segment sending is  " + segment_number );
					
				}
				
				System.out.println("***>>>  segments value " + segment_number + "  sequence number value : " + seq_no);
				System.out.println("all segments sent, restart.");
				
				System.out.println("***>>>  segments value after reset " + segment_number + "  sequence number value after reset: " + seq_no);
				
			}

	
	public boolean AckRecieved() throws IOException, ClassNotFoundException {
		Goodput();
		int Ack = (int) in.readObject();
        last_ack_recieved = Ack;
        System.out.println("last ack recieved by client is : " + last_ack_recieved);

        ack_expected = seq_no;
        System.out.println("expected ack  : " + ack_expected);
        
        if(last_ack_recieved==ack_expected) {
        	System.out.println("ack received : " + last_ack_recieved);
        	return true;
        } 
        
        return false;
	}
	
	public void Goodput() throws ClassNotFoundException, IOException {
		if(in.readObject() instanceof String) {
			System.out.println("asking for total number of segments sent " );
			out.writeObject(String.valueOf(number_of_segments_sent));
		}
		
	}
	
	public void retransmission(int resending_from_segment) throws IOException {
		droppedEndTime = System.nanoTime();
		dropped_seq_no_info = String.valueOf(resending_from_segment);
		dropped_seq_no_info = dropped_seq_no_info.concat(" ");
		dropped_seq_no_info = dropped_seq_no_info.concat(String.valueOf(droppedEndTime - sendingStartTime));
		seq_no_dropped_over_time.add(dropped_seq_no_info);
		int resending_from_seq_no = resending_from_segment*1024;
		Integer[] resend_from = {resending_from_segment, resending_from_seq_no};
		int position = buffer.indexOf(resend_from);
		starting_seq_number =  buffer.get(position)[1];
		ending_seq_number = segment_number+(sliding_window_size-1) * 1024;
		//number of segments to send
		for(j=0; j<sliding_window_size; j++) {
			System.out.println("Resending segment # " + buffer.get(position)[0] + "\n" );
			//sending sequence numbers + the segment	
				packet = String.valueOf(buffer.get(position)[1]);
				packet = packet.concat(" ");
				packet = packet.concat(String.valueOf(buffer.get(position)[0]));
				out.writeObject(packet);
				System.out.println("Sending seq  no " + seq_no + " and segment # : " + segment_number);
			
			resending_from_segment++;
			number_of_segments_sent++;
		}

	}
	
	public void SlidingWindowHandling() throws ClassNotFoundException, IOException {
		windowStartTime = System.nanoTime();
		if(calculate_success && sliding_window_size < MAX_SLIDING_WINDOW_VALUE && segment_lost==false) {
			sliding_window_size = sliding_window_size * 2;
			System.out.println("Successfully sent segments upto " + (segment_number-1) + "\n" );
			System.out.println("Window size :  " + sliding_window_size + "\n" );
			buffer.clear();
		}
		else if(calculate_success && sliding_window_size < MAX_SLIDING_WINDOW_VALUE && segment_lost==true) {
			sliding_window_size = sliding_window_size + 1;
			System.out.println("Successfully sent segments upto " + (segment_number-1) + "\n" );
			System.out.println("Window size :  " + sliding_window_size + "\n" );
			buffer.clear();
		}
		else if(!calculate_success){
			sliding_window_size = sliding_window_size/2;
			segment_lost=true;
			System.out.println("Unsuccessfully sent segments upto " + (segment_number-j) + "\n" );
			System.out.println("Window size :  " + sliding_window_size + "\n" );
			retransmission(segment_number-j);
		}
		else if(calculate_success && sliding_window_size==MAX_SLIDING_WINDOW_VALUE) {
			sliding_window_size = MAX_SLIDING_WINDOW_VALUE;
			System.out.println("Successfully sent segments upto " + (segment_number-1) + "\n" );
			System.out.println("Window size :  " + sliding_window_size + "\n" );
			buffer.clear();
		}
		windowEndTime = System.nanoTime();
		window_graph_info = String.valueOf(sliding_window_size);
		window_graph_info = window_graph_info.concat(" ");
		window_graph_info = window_graph_info.concat(String.valueOf(windowEndTime - windowStartTime));
		window_size_over_time.add(window_graph_info);
	}
	
	public void Graphs() {
		try {
			FileWriter fWriter = new FileWriter("sws_graph.txt");
			for(int i=0; i<window_size_over_time.size(); i++) {
				fWriter.write(window_size_over_time.get(i));
				
			}
			fWriter.close();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		try {
			FileWriter fWriter = new FileWriter("dropped_seq_numbers.txt");
			for(int i=0; i<seq_no_dropped_over_time.size(); i++) {
				fWriter.write(seq_no_dropped_over_time.get(i));
				
			}
			fWriter.close();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		
	}
	
	public void runClient() throws Exception {
		
		try {
			//creating the client socket
			String address = "169.254.160.77"; //sjsu
			client = new Socket(address, 9999);

			System.out.println("client socket created");
			
		    out = new ObjectOutputStream(client.getOutputStream()); //sending 
		    System.out.println("output stream created");
		    
		    in = new ObjectInputStream(client.getInputStream()); //recieving
		    System.out.println("input stream created");
			
			//sending a message to the server
			System.out.println("sending message...");
			String msg = ("network");
			out.writeObject(msg);
			out.flush();
			
			String message_recieved = (String)in.readObject();
			System.out.println(message_recieved + " recieved by client.");
			
			
			SendPackets();
			Graphs();
			
			in.close();
			out.close();
			client.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		System.out.println("connection terminated.");		
	}
	
	public static void main(String[]  args) throws Exception {
		TCPClient2 s = new TCPClient2();
	     s.runClient();
	}

}
