package socket_code;

import java.io.*;
import java.net.Socket;


public class TCP_Client {
	
	ObjectOutputStream out;
	ObjectInputStream in;
	
	final static int TOTAL_SEQUENCE_NUMBERS = 2^16;
	final int MAX_SLIDING_WINDOW_VALUE = 2^16;
    final int TOTAL_SEGMENTS = 10000000;
	int sequenceNumber = 1;
	int sliding_window_size = 1;
	int last_ack_recieved = 0;
	int last_frame_sent = 0;
	int segments_sent = 0;
	int next_frame;
    boolean segment_lost = false;
    int i;
    
    String packet;
	
	//sending the segments
	public void SendPackets() throws Exception{
		
		if(sliding_window_size < MAX_SLIDING_WINDOW_VALUE) {
			if(segments_sent <TOTAL_SEGMENTS ) {
				System.out.println("Window size :  " + sliding_window_size + "\n" );
				System.out.println("Sending segment # " + segments_sent + "\n" );
				for(i=0; i < TOTAL_SEQUENCE_NUMBERS; i=i+1024) {
					packet = String.valueOf(i);
					out.writeObject(packet);
					System.out.println("Sent seq  no " + i + "\n" );
				}
				SlidingWindowHandling();
				if(AckRecieved()) {
					segments_sent++;
				}
			}	
		}
		
	}
	
	public boolean AckRecieved() throws IOException, ClassNotFoundException {
		String Ack = (String)in.readObject();
        last_ack_recieved = Integer.parseInt(Ack);
        if(last_ack_recieved==i+1) {
        	System.out.println("ack received : " + last_ack_recieved);
        	return true;
        }
        return false;
        
	}
	
	public void SlidingWindowHandling() throws ClassNotFoundException, IOException {
		if(AckRecieved() && sliding_window_size < MAX_SLIDING_WINDOW_VALUE && segment_lost==false) {
			sliding_window_size = sliding_window_size * 2;
			System.out.println("Successfully sent segment # " + segments_sent + "\n" );
			System.out.println("Window size :  " + sliding_window_size + "\n" );
		}
		else if(AckRecieved() && sliding_window_size < MAX_SLIDING_WINDOW_VALUE && segment_lost==true) {
			sliding_window_size = sliding_window_size + 1;
			System.out.println("Successfully sent segment # " + segments_sent + "\n" );
			System.out.println("Window size :  " + sliding_window_size + "\n" );
		}
		else if(!AckRecieved()){
			sliding_window_size = sliding_window_size/2;
			segment_lost=true;
			System.out.println("Unsuccessfully sent segment # " + segments_sent + "\n" );
		}
		else if(AckRecieved() && sliding_window_size==MAX_SLIDING_WINDOW_VALUE) {
			System.out.println("Successfully sent segment # " + segments_sent + "\n" );
			System.out.println("Window size :  " + sliding_window_size + "\n" );
		}
	}
	
	public void runClient() throws Exception {
		
		try {
			//creating the client socket
			Socket client = new Socket("localhost", 4999);
			client.setSoTimeout(10*1000);
			System.out.print("client socket created");
			
		    out = new ObjectOutputStream(client.getOutputStream());
		    in = new ObjectInputStream(client.getInputStream());
			
			//sending a message to the server
			System.out.print("sending message...");
			String msg = ("network");
			out.writeObject(msg);
			
			SendPackets();
			
			in.close();
			out.close();
			client.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		System.out.println("connection terminated.");
		
	}
	
	public static void main(String[]  args) throws Exception {
		TCP_Client s = new TCP_Client();
	     s.runClient();
		

	}

}
